#Environment Variable for who receives SNS alerts for this module definition
Parameters:
  SnsEmail:
    Type: String
    Description: The email address that receives SNS notifications
    Default: me@email.com
  Environment:
    Type: String
    Description: The Environment this is launched in
  ApplicationName:
    Type: String
    Description: The Application Name this is for.
  S3BucketName:
    Type: String
    Description: The S3 Bucket the CFN templates, Lambda and Step Functions are in
  EventBridgeStepFunctionRole:
    Type: String
    Description: The name of the EventBridge Role that invokes Lambda
  EventBridgeLambdaRole:
    Type: String
    Description: The name of the EventBridge Role that initiates StepFunctions
  LambdaRole:
    Type: String
    Description: The name of the Lambda Role that describes AutoScaling
  StepFunctionRole:
    Type: String
    Description: The name of the StepFunction Role
#Transform required for AWS AMS
Transform:
  Name: AmsStackTransform
  Parameters:
    StackId: !Ref "AWS::StackId"
Resources:
  #Creates EventBus for restart events
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${ApplicationName}EventBus-${Environment}"

  #Create an event rule for external initiation against all Autoscaling groups
  ExternalEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ApplicationName}-External-InitiateNightlyEvent-${Environment}"
      Description: !Sub "Externally Initiate StepFunction State Machine - ${Environment}"
      EventBusName: !GetAtt EventBus.Name
      EventPattern: !Sub '{"source": ["external-initiation"], "detail": {"environment": ["${Environment}"]}}'
      Targets:
        - Arn: !GetAtt EventPublisherLamdba.Arn
          Id: target
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${EventBridgeLambdaRole}"

  #Creates Target Rule for Lambda for restart events and kicks off AutoScaling State Machine
  AutoscalingEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ApplicationName}-InitiateStateMachine-${Environment}"
      Description: !Sub "Initiate StepFunction State Machine - ${Environment}"
      EventBusName: !GetAtt EventBus.Name
      EventPattern: !Sub '{"source": [{ "anything-but": [ "external-initiation" ]}], "detail": {"AutoScalingGroupName": [{ "exists": true }]}}'
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: target
          RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${EventBridgeStepFunctionRole}"

  #Creates Target Rule for External system to kick off AutoScaling State Machine
  ExternalAutoscalingEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ApplicationName}-External-InitiateStateMachine-${Environment}"
      Description: !Sub "Initiate StepFunction State Machine - ${Environment}"
      EventBusName: !GetAtt EventBus.Name
      EventPattern: !Sub '{"source": ["external-initiation"], "detail": {"AutoScalingGroupName": [{ "exists": true }]}}'
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: target
          RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${EventBridgeStepFunctionRole}"

  #Targets EventRule once for every auto scaling group in existence
  EventPublisherLamdba:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SNS_ARN: !Ref SNSTopic
          Environment: !Ref Environment
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub "${ApplicationName}/${Environment}/event-publisher.zip"
      Description: Lambda Function that pushes an event to the EventBus for each asg in account.
      FunctionName: !Sub "event_publisher_${Environment}"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}"
      Runtime: python3.9
      Timeout: 300

  EventPublisherLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt EventPublisherLamdba.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !GetAtt ScheduledRule.Arn

  EventPublisherLamdbaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref EventPublisherLamdba

  #Creates the lambda destination OnSuccess
  EventPublisherLamdbaDestination:
    Type: AWS::Lambda::EventInvokeConfig
    Properties:
      DestinationConfig:
        OnSuccess:
          Destination: !GetAtt EventBus.Arn
      FunctionName: !Ref EventPublisherLamdba
      Qualifier: !GetAtt EventPublisherLamdbaVersion.Version

  #Calculates difference within one autoscaling group of how many instances need to still run
  CalculatePlanLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SNS_ARN: !Ref SNSTopic
          Environment: !Ref Environment
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Sub "${ApplicationName}/${Environment}/calculate-restart-plan.zip"
      Description: Lambda function that calculates restart plan and iterates through each instance within the asg passed to it.
      FunctionName: !Sub "calculate_restart_plan_${Environment}"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}"
      Runtime: python3.9
      Timeout: 300

  #StepFunction State Machine for restart module for Autoscaling group
  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${ApplicationName}-Restart-${Environment}"
      DefinitionS3Location:
        Bucket: !Ref S3BucketName
        Key: !Sub "${ApplicationName}/${Environment}/autoscaling_state_machine.json"
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${StepFunctionRole}"

  #SNS topic for completed instance or failed instance alert
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ApplicationName}-Restart-Message-${Environment}"
      Subscription:
        - Endpoint: !Ref SnsEmail
          Protocol: "email"
